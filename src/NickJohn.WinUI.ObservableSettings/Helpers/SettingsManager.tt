<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ assembly name="$(SolutionDir)src\NickJohn.WinUI.ObservableSettings.Core\bin\$(Configuration)\netstandard2.0\NickJohn.WinUI.ObservableSettings.Core.dll" #>
<#@ import namespace="NickJohn.WinUI.ObservableSettings.Core.Constants" #>
<#@ output extension=".cs" #>
// Note:
// Some types can be directly stored in "ApplicationData.Current.LocalSettings": 
// https://docs.microsoft.com/windows/apps/design/app-settings/store-and-retrieve-app-data#settings
// Unfortunately there's no way to constraint a generic type "T" to "T1 or T2" in C#, so I have to use a T4 template to generate these methods.

#pragma warning disable CS1574 // XML comment has cref attribute that could not be resolved

using System.Text.Json;
using Windows.Foundation.Collections;
using Windows.Storage;

namespace NickJohn.WinUI.ObservableSettings.Internal;

/// <summary>
/// A helper class to read and write settings in <see cref="Windows.Storage.ApplicationData.Current.LocalSettings.Values"/>.
/// </summary>
public static class SettingsManager
{
    private static IPropertySet LocalSettings => ApplicationData.Current.LocalSettings.Values;

    #region JSON

    /// <summary>
    /// Try to read JSON string from <see cref="Windows.Storage.ApplicationData.Current.LocalSettings.Values"/> with <paramref name="settingKey"/>, 
    /// deserialized it to <typeparamref name="T"/> and return the value.
    /// Otherwise, return <paramref name="defaultValue"/>.
    /// </summary>
    /// <typeparam name="T">The type of the setting</typeparam>
    /// <param name="settingKey">The key of setting in <see cref="Windows.Storage.ApplicationData.Current.LocalSettings.Values"/></param>
    /// <param name="defaultValue">The default setting value to return if failed to read setting</param>
    public static T GetJsonSetting<T>(string settingKey, T defaultValue)
    {
        if (LocalSettings.TryGetValue(settingKey, out object? settingObject))
        {
            if (settingObject is string jsonString)
            {
                try
                {
                    T? settingValue = JsonSerializer.Deserialize<T>(jsonString);
                    if (settingValue is not null)
                    {
                        return settingValue;
                    }
                }
                catch (JsonException)   // The JSON is invalid
                {
                    return defaultValue;
                }
            }
        }

        return defaultValue;
    }

    /// <summary>
    /// Try to read JSON string from <see cref="Windows.Storage.ApplicationData.Current.LocalSettings.Values"/> with <paramref name="settingKey"/>, 
    /// deserialized it to <typeparamref name="T"/> and return the value.
    /// Otherwise, return <paramref name="defaultValue"/>.
    /// </summary>
    /// <typeparam name="T">The type of the setting</typeparam>
    /// <param name="settingKey">The key of setting in <see cref="Windows.Storage.ApplicationData.Current.LocalSettings.Values"/></param>
    /// <param name="defaultValue">The default setting value to return if failed to read setting</param>
    public static T? GetJsonSettingNullable<T>(string settingKey, T? defaultValue)
    {
        if (LocalSettings.TryGetValue(settingKey, out object? settingObject))
        {
            if (settingObject is string jsonString)
            {
                try
                {
                    T? settingValue = JsonSerializer.Deserialize<T>(jsonString);
                    if (settingValue is not null)
                    {
                        return settingValue;
                    }
                }
                catch (JsonException)   // The JSON is invalid
                {
                    return defaultValue;
                }
            }
        }

        return defaultValue;
    }

    /// <summary>
    /// Serialize <paramref name="value"/> to a JSON string, 
    /// and save it to <see cref="Windows.Storage.ApplicationData.Current.LocalSettings.Values"/> with <paramref name="settingKey"/>, 
    /// </summary>
    /// <typeparam name="T">The type of the setting</typeparam>
    /// <param name="settingKey">The key of setting</param>
    /// <param name="value">The setting value to set</param>
    public static void SetJsonSetting<T>(string settingKey, T? value)
    {
        string jsonString = JsonSerializer.Serialize(value);
        LocalSettings[settingKey] = jsonString;
    }

    #endregion

<# foreach (string type in SettingTypes.NativePrimitiveSettingTypes)
{ #>
    #region <#= type #>

    /// <summary>
    /// Try to read a <see cref="<#= type #>"/> from <see cref="Windows.Storage.ApplicationData.Current.LocalSettings.Values"/> with <paramref name="settingKey"/>.
    /// Otherwise, return <paramref name="defaultValue"/>.
    /// </summary>
    /// <param name="settingKey">The key of setting in <see cref="Windows.Storage.ApplicationData.Current.LocalSettings.Values"/></param>
    /// <param name="defaultValue">The default setting value to return if failed to read setting</param>
    public static <#= type #> GetNativeSetting(string settingKey, <#= type #> defaultValue)
    {
        if (LocalSettings.TryGetValue(settingKey, out object? settingObject))
        {
            if (settingObject is <#= type #> settingValue)
            {
                return settingValue;
            }
        }
        return defaultValue;
    }

    /// <summary>
    /// Try to read a <see cref="<#= type #>"/> from <see cref="Windows.Storage.ApplicationData.Current.LocalSettings.Values"/> with <paramref name="settingKey"/>.
    /// Otherwise, return <paramref name="defaultValue"/>.
    /// </summary>
    /// <param name="settingKey">The key of setting in <see cref="Windows.Storage.ApplicationData.Current.LocalSettings.Values"/></param>
    /// <param name="defaultValue">The default setting value to return if failed to read setting</param>
    public static <#= type #>? GetNativeSettingNullable(string settingKey, <#= type #>? defaultValue)
    {
        if (LocalSettings.TryGetValue(settingKey, out object? settingObject))
        {
            if (settingObject is <#= type #> settingValue)
            {
                return settingValue;
            }
        }
        return defaultValue;
    }

    /// <summary>
    /// Save <paramref name="value"/> to <see cref="Windows.Storage.ApplicationData.Current.LocalSettings.Values"/> with <paramref name="settingKey"/>.
    /// </summary>
    /// <param name="settingKey">The key of setting</param>
    /// <param name="value">The setting value to set</param>
    public static void SetNativeSetting(string settingKey, <#= type #>? value)
    {
        LocalSettings[settingKey] = value;
    }

    #endregion

<# } #>
<# foreach (string type in SettingTypes.NativeNonPrimitiveSettingTypes)
{ #>
    #region <#= type #>

    /// <summary>
    /// Try to read a <see cref="<#= type #>"/> from <see cref="Windows.Storage.ApplicationData.Current.LocalSettings.Values"/> with <paramref name="settingKey"/>.
    /// Otherwise, return <paramref name="defaultValue"/>.
    /// </summary>
    /// <param name="settingKey">The key of setting in <see cref="Windows.Storage.ApplicationData.Current.LocalSettings.Values"/></param>
    /// <param name="defaultValue">The default setting value to return if failed to read setting</param>
    public static <#= type #> GetNativeSetting(string settingKey, <#= type #> defaultValue)
    {
        if (LocalSettings.TryGetValue(settingKey, out object? settingObject))
        {
            if (settingObject is <#= type #> settingValue)
            {
                return settingValue;
            }
        }
        return defaultValue;
    }

    /// <summary>
    /// Try to read a <see cref="<#= type #>"/> from <see cref="Windows.Storage.ApplicationData.Current.LocalSettings.Values"/> with <paramref name="settingKey"/>.
    /// Otherwise, return <paramref name="defaultValue"/>.
    /// </summary>
    /// <param name="settingKey">The key of setting in <see cref="Windows.Storage.ApplicationData.Current.LocalSettings.Values"/></param>
    /// <param name="defaultValue">The default setting value to return if failed to read setting</param>
    public static <#= type #>? GetNativeSettingNullable(string settingKey, <#= type #>? defaultValue)
    {
        if (LocalSettings.TryGetValue(settingKey, out object? settingObject))
        {
            if (settingObject is <#= type #> settingValue)
            {
                return settingValue;
            }
        }
        return defaultValue;
    }

    /// <summary>
    /// Save <paramref name="value"/> to <see cref="Windows.Storage.ApplicationData.Current.LocalSettings.Values"/> with <paramref name="settingKey"/>.
    /// </summary>
    /// <param name="settingKey">The key of setting</param>
    /// <param name="value">The setting value to set</param>
    public static void SetNativeSetting(string settingKey, <#= type #>? value)
    {
        LocalSettings[settingKey] = value;
    }

    #endregion

<# } #>
}
